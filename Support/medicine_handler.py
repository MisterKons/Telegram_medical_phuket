import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service as ChromeService
from webdriver_manager.chrome import ChromeDriverManager
import time
import re
import asyncio
import concurrent.futures
from transformers import pipeline
from others.database import get_saved_analog, save_drug_analog

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
qa_pipeline = pipeline("question-answering", model="deepset/roberta-base-squad2",
                       tokenizer="deepset/roberta-base-squad2")


async def register_medicine_handlers(client, message):
    user_id = message.from_user.id
    client.user_data[user_id] = client.user_data.get(user_id, {})
    instruction_message = ("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∏—â–µ—Ç–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ "
                           "—Å–∏–º–≤–æ–ª—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ $#@!., –∏ —Ç.–¥. üëá\n\nüîé –ü–æ–∏—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 10 —Å–µ–∫—É–Ω–¥.")
    client.user_data[user_id]["awaiting_medicine_input"] = True

    await client.send_message(user_id, instruction_message)


async def handle_medicine_input(client, message):
    user_id = message.from_user.id
    if user_id in client.user_data and client.user_data[user_id].get("awaiting_medicine_input"):
        medicine_name = message.text
        client.user_data[user_id]["awaiting_medicine_input"] = False

        saved_analog = await get_saved_analog(medicine_name)
        if saved_analog:
            response = (f"üîç –ù–∞–π–¥–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–æ–≥ –¥–ª—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ {medicine_name}:\n\n"
                        f"{saved_analog['text']}\n"
                        f"[–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫]({saved_analog['link']})\n\n")
            await client.send_message(user_id, response, disable_web_page_preview=True)
            return

        if re.match("^[A-Za-z0-9–ê-–Ø–∞-—è]+$", medicine_name):
            await message.reply_text("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
            try:
                analog = await search_drug_analogs(medicine_name)
                if analog:
                    client.user_data[user_id]["current_medicine"] = medicine_name
                    client.user_data[user_id]["current_analog"] = analog

                    response = (f"üîç –ù–∞–π–¥–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–æ–≥ –¥–ª—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ {medicine_name}:\n\n"
                                f"{analog['text']}\n"
                                f"[–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫]({analog['link']})\n\n"
                                f"–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω? [–î–∞](feedback_correct) / [–ù–µ—Ç](feedback_incorrect)")

                else:
                    response = "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –∞–Ω–∞–ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            except Exception as e:
                logger.error(f"Error occurred during drug analog search: {e}")
                response = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–∞–ª–æ–≥–æ–≤ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        else:
            response = ("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –∏–∑–±–µ–≥–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö "
                        "—Å–∏–º–≤–æ–ª–æ–≤.\nüíä–í–≤–æ–¥–∏—Ç–µ –≤ —á–∞—Ç —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–∞–≤–∞. \nüîÅ–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ /medicine")

        await client.send_message(user_id, response, disable_web_page_preview=True)


async def search_drug_analogs(russian_drug_name):
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

    try:
        driver.get('https://drugsearch.carrd.co/')
        await asyncio.sleep(2)  # Ensure the page loads completely

        search_box = driver.find_element(By.CSS_SELECTOR, 'input.gsc-input')
        search_query = f"{russian_drug_name} –∞–Ω–∞–ª–æ–≥ –≤ –¢–∞–∏–ª–∞–Ω–¥–µ"
        search_box.send_keys(search_query)
        search_box.send_keys(Keys.RETURN)
        await asyncio.sleep(2)  # Wait for search results to load

        results = driver.find_elements(By.CSS_SELECTOR, '.gsc-webResult .gsc-result')
        best_analog = None
        highest_score = 0

        with concurrent.futures.ThreadPoolExecutor() as executor:
            future_to_result = {executor.submit(process_result, result, russian_drug_name): result for result in
                                results[:5]}  # Limit to top 5 results

            for future in concurrent.futures.as_completed(future_to_result):
                try:
                    analog = future.result()
                    if analog and analog['score'] > highest_score:
                        highest_score = analog['score']
                        best_analog = analog
                except Exception as e:
                    logger.error(f"Error processing result: {e}")
                    continue

        return best_analog
    finally:
        driver.quit()


def process_result(result, russian_drug_name):
    try:
        title_element = result.find_element(By.CSS_SELECTOR, '.gs-title a')
        snippet_element = result.find_element(By.CSS_SELECTOR, '.gs-snippet')
        analog_link = title_element.get_attribute('href')
        analog_snippet = snippet_element.text

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
        answer = qa_pipeline(question=f"–ö–∞–∫–æ–π –∞–Ω–∞–ª–æ–≥ {russian_drug_name} –≤ –¢–∞–∏–ª–∞–Ω–¥–µ?", context=analog_snippet)
        answer_text = extract_full_sentence(analog_snippet, answer['answer'])
        return {"link": analog_link, "text": answer_text, "score": answer['score']}
    except Exception as e:
        logger.error(f"Error processing result: {e}")
        return None


def extract_full_sentence(context, answer):
    # –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –æ—Ç–≤–µ—Ç
    sentences = context.split('. ')
    for sentence in sentences:
        if answer in sentence:
            return sentence.strip()
    return answer  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
